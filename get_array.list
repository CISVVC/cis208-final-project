     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  %include "defines.inc"
    33                              <1> %define DOUBLE_SIZE 8
    34                                  ;
    35                                  ; This c callable function will create an array of the given size
    36                                  ;
    37                                  ;
    38                                  
    39                                  
    40                                  segment .data
    41 00000000 0A4661696C75726520-     memory_failure db 10,"Failure to allocate memory",10,"-------------",10,0
    42 00000009 746F20616C6C6F6361-
    43 00000012 7465206D656D6F7279-
    44 0000001B 0A2D2D2D2D2D2D2D2D-
    45 00000024 2D2D2D2D2D0A00     
    46 0000002B 0A6D656D6F72792061-     L1 db 10,"memory allocated %d",10,"-------------",10,0
    47 00000034 6C6C6F636174656420-
    48 0000003D 25640A2D2D2D2D2D2D-
    49 00000046 2D2D2D2D2D2D2D0A00 
    50                                  
    51                                  segment .bss
    52                                  
    53                                  %define n dword[ebp + 8]
    54                                  
    55                                  segment .text
    56                                      global  get_array
    57                                  	extern  malloc
    58                                      extern  printf
    59                                  
    60                                  get_array:
    61 00000000 C8000000                    enter   0,0
    62 00000004 53                      	push    ebx
    63                                  
    64 00000005 8B4508                  	mov     eax,n 		; size of the array
    65 00000008 BB08000000              	mov 	ebx,DOUBLE_SIZE
    66 0000000D F7E3                    	mul 	ebx
    67 0000000F 50                      	push    eax
    68 00000010 E8(00000000)            	call    malloc			; call the system malloc function
    69 00000015 85C0                    	test    eax,eax
    70 00000017 7406                    	jz   	fail_exit
    71 00000019 83C404                  	add     esp,4			; clean up the stack
    72                                  
    73                                  done:
    74 0000001C 5B                          pop     ebx
    75 0000001D C9                          leave                     
    76 0000001E C3                          ret
    77                                  
    78                                  fail_exit:
    79 0000001F 68[00000000]            	push dword memory_failure
    80 00000024 E8(00000000)            	call printf
    81 00000029 83C408                  	add  esp,8
    82 0000002C EBEE                    	jmp  done
